Algoritmo Factorial(n)
    Si n = 0 entonces
        devolver 1  // Caso base: el factorial de 0 es 1
    Sino
        devolver n * Factorial(n - 1)  // Progreso hacia el caso base
FinAlgoritmo

Caso base: Cuando n = 0, devolver 1.
Progreso hacia el caso base: En cada llamada recursiva, se reduce el valor de n en 1 hasta llegar a 0.
El parámetro n siempre se decrementa en 1, lo que garantiza que eventualmente alcanzará el caso base cuando n = 0.
El algoritmo realiza una llamada recursiva para cada decremento de n. Por lo tanto, el tiempo de ejecución es O(n).

Algoritmo SumaLineal(A, n)
    Si n = 0 entonces
        devolver 0  // Caso base: no hay elementos
    Sino
        devolver A[n - 1] + SumaLineal(A, n - 1)  // Progreso hacia el caso base
FinAlgoritmo

Caso base: Cuando n = 0, devolver 0 (no hay elementos que sumar).
Progreso hacia el caso base: En cada llamada recursiva, n se decrementa, acercándose a 0.
El parámetro n siempre se reduce en 1, garantizando que alcanzará el caso base.
El tiempo de ejecución es O(n), ya que el algoritmo realiza una llamada recursiva por cada elemento del array.

Algoritmo Potencia(base, exponente)
    Si exponente = 0 entonces
        devolver 1  // Caso base: cualquier número elevado a 0 es 1
    Sino
        devolver base * Potencia(base, exponente - 1)  // Progreso hacia el caso base
FinAlgoritmo

Caso base: Cuando el exponente es 0, devolver 1.
Progreso hacia el caso base: El exponente se reduce en 1 hasta llegar a 0.
El exponente siempre disminuye en 1, asegurando que eventualmente se alcanzará el caso base.
El tiempo de ejecución es O(exponente), ya que realiza una llamada recursiva para cada decremento del exponente.

Algoritmo InvertirVector(A, inicio, fin)
    Si inicio >= fin entonces
        salir  // Caso base: los índices se cruzan o son iguales
    Sino
        intercambiar(A[inicio], A[fin])
        InvertirVector(A, inicio + 1, fin - 1)  // Progreso hacia el caso base
FinAlgoritmo

Caso base: Cuando inicio >= fin, salir (los índices se cruzan o son iguales).
Progreso hacia el caso base: Se incrementa inicio y se decrementa fin en cada llamada recursiva.
Los índices se acercan al centro en cada paso, lo que garantiza que el algoritmo progresa hacia el caso base.
El tiempo de ejecución es O(n), donde n es el tamaño del vector.